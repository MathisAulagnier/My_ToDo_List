{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/TaskTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './TaskTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskTracker = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n  const formatDate = date => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n    return `${year}-${month}-${day}`;\n  };\n  const loadTasks = useCallback(async () => {\n    const currentDate = formatDate(new Date());\n    try {\n      const response = await fetch('http://localhost:3001/api/tasks');\n      const data = await response.json();\n\n      // Chercher les tâches correspondant à la date actuelle\n      const todayTasks = data.find(task => task.Date === currentDate);\n      if (todayTasks) {\n        setTasks(todayTasks.Tasks);\n      } else {\n        setTasks([]); // Aucune tâche trouvée pour la date actuelle\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des tâches:', error);\n      setTasks([]); // En cas d'erreur, initialiser les tâches à un tableau vide\n    }\n  }, []);\n  const toggleTask = id => {\n    const updatedTasks = tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task);\n    setTasks(updatedTasks);\n  };\n  const addTask = () => {\n    if (newTask.trim() === '') return; // Ne rien faire si la tâche est vide\n\n    const newTaskObj = {\n      id: tasks.length + 1,\n      text: newTask,\n      completed: false\n    };\n    setTasks([...tasks, newTaskObj]);\n    setNewTask(''); // Réinitialiser le champ de texte\n  };\n  const validateTasks = async () => {\n    const currentDate = formatDate(new Date());\n    try {\n      const response = await fetch('http://localhost:3001/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Tasks: tasks\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour des tâches quotidiennes');\n      }\n      alert('Tâches quotidiennes mises à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des tâches quotidiennes:', error);\n      alert('Erreur lors de la mise à jour des tâches quotidiennes');\n    }\n  };\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Daily To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: task.completed,\n        onChange: () => toggleTask(task.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), task.text]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"Ajouter une nouvelle t\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Ajouter T\\xE2che\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateTasks,\n      children: \"Valider T\\xE2ches\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskTracker, \"Gv2osiZa9Nmm40G8xvr93laoNAE=\");\n_c = TaskTracker;\nexport default TaskTracker;\nvar _c;\n$RefreshReg$(_c, \"TaskTracker\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","TaskTracker","_s","tasks","setTasks","newTask","setNewTask","formatDate","date","d","Date","day","getDate","month","getMonth","year","getFullYear","loadTasks","currentDate","response","fetch","data","json","todayTasks","find","task","Tasks","error","console","toggleTask","id","updatedTasks","map","completed","addTask","trim","newTaskObj","length","text","validateTasks","method","headers","body","JSON","stringify","ok","Error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","value","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/TaskTracker.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './TaskTracker.css';\n\nconst TaskTracker = () => {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n\n    return `${year}-${month}-${day}`;\n  };\n\n  const loadTasks = useCallback(async () => {\n    const currentDate = formatDate(new Date());\n\n    try {\n      const response = await fetch('http://localhost:3001/api/tasks');\n      const data = await response.json();\n\n      // Chercher les tâches correspondant à la date actuelle\n      const todayTasks = data.find(task => task.Date === currentDate);\n\n      if (todayTasks) {\n        setTasks(todayTasks.Tasks);\n      } else {\n        setTasks([]); // Aucune tâche trouvée pour la date actuelle\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des tâches:', error);\n      setTasks([]); // En cas d'erreur, initialiser les tâches à un tableau vide\n    }\n  }, []);\n\n  const toggleTask = (id) => {\n    const updatedTasks = tasks.map((task) =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    );\n    setTasks(updatedTasks);\n  };\n\n  const addTask = () => {\n    if (newTask.trim() === '') return; // Ne rien faire si la tâche est vide\n\n    const newTaskObj = {\n      id: tasks.length + 1,\n      text: newTask,\n      completed: false,\n    };\n\n    setTasks([...tasks, newTaskObj]);\n    setNewTask(''); // Réinitialiser le champ de texte\n  };\n\n  const validateTasks = async () => {\n    const currentDate = formatDate(new Date());\n\n    try {\n      const response = await fetch('http://localhost:3001/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Tasks: tasks,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour des tâches quotidiennes');\n      }\n\n      alert('Tâches quotidiennes mises à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des tâches quotidiennes:', error);\n      alert('Erreur lors de la mise à jour des tâches quotidiennes');\n    }\n  };\n\n  useEffect(() => {\n    loadTasks();\n  }, [loadTasks]);\n\n  return (\n    <div className=\"task-tracker\">\n      <h2>Daily To Do</h2>\n      {tasks.map((task) => (\n        <div key={task.id} className=\"task-item\">\n          <input\n            type=\"checkbox\"\n            checked={task.completed}\n            onChange={() => toggleTask(task.id)}\n          />\n          {task.text}\n        </div>\n      ))}\n      <input\n        type=\"text\"\n        value={newTask}\n        onChange={(e) => setNewTask(e.target.value)}\n        placeholder=\"Ajouter une nouvelle tâche\"\n      />\n      <button onClick={addTask}>Ajouter Tâche</button>\n      <button onClick={validateTasks}>Valider Tâches</button>\n    </div>\n  );\n};\n\nexport default TaskTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}