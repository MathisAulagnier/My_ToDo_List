{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/ProductivityChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto'; // Importer Chart.js auto pour react-chartjs-2\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductivityChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      const today = new Date();\n      const dates = Array.from({\n        length: 30\n      }, (_, i) => {\n        const date = new Date();\n        date.setDate(today.getDate() - i);\n        return date.toISOString().split('T')[0];\n      }).reverse(); // Liste des 30 derniers jours\n\n      const moodResponse = await fetch('http://localhost:3001/api/moods');\n      const moodData = await moodResponse.json();\n      const sleepResponse = await fetch('http://localhost:3001/api/sleep');\n      const sleepData = await sleepResponse.json();\n      const dailyTaskResponse = await fetch('http://localhost:3001/api/daily-tasks');\n      const dailyTaskData = await dailyTaskResponse.json();\n      const extraTaskResponse = await fetch('http://localhost:3001/api/extra-tasks');\n      const extraTaskData = await extraTaskResponse.json();\n      const scores = dates.map(date => {\n        var _moodData$find, _sleepData$find, _dailyTaskData$find, _extraTaskData$find;\n        const moodScore = ((_moodData$find = moodData.find(entry => entry.Date === date)) === null || _moodData$find === void 0 ? void 0 : _moodData$find.Score) || 0;\n        const sleepScore = ((_sleepData$find = sleepData.find(entry => entry.Date === date)) === null || _sleepData$find === void 0 ? void 0 : _sleepData$find.Score) || 0;\n        const dailyTaskScore = ((_dailyTaskData$find = dailyTaskData.find(entry => entry.Date === date)) === null || _dailyTaskData$find === void 0 ? void 0 : _dailyTaskData$find.Score) || 0;\n        const extraTaskScore = ((_extraTaskData$find = extraTaskData.find(entry => entry.Date === date)) === null || _extraTaskData$find === void 0 ? void 0 : _extraTaskData$find.Score) || 0;\n        return moodScore + sleepScore + dailyTaskScore + extraTaskScore;\n      });\n      setChartData({\n        labels: dates,\n        datasets: [{\n          label: 'Score de productivité sur 30 jours',\n          data: scores,\n          fill: false,\n          borderColor: 'rgba(75,192,192,1)',\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          tension: 0.1\n        }]\n      });\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Productivity Over Last 30 Days\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductivityChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = ProductivityChart;\nexport default ProductivityChart;\nvar _c;\n$RefreshReg$(_c, \"ProductivityChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","jsxDEV","_jsxDEV","ProductivityChart","_s","chartData","setChartData","fetchData","today","Date","dates","Array","from","length","_","i","date","setDate","getDate","toISOString","split","reverse","moodResponse","fetch","moodData","json","sleepResponse","sleepData","dailyTaskResponse","dailyTaskData","extraTaskResponse","extraTaskData","scores","map","_moodData$find","_sleepData$find","_dailyTaskData$find","_extraTaskData$find","moodScore","find","entry","Score","sleepScore","dailyTaskScore","extraTaskScore","labels","datasets","label","data","fill","borderColor","backgroundColor","tension","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/ProductivityChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto'; // Importer Chart.js auto pour react-chartjs-2\n\nconst ProductivityChart = () => {\n  const [chartData, setChartData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const today = new Date();\n      const dates = Array.from({ length: 30 }, (_, i) => {\n        const date = new Date();\n        date.setDate(today.getDate() - i);\n        return date.toISOString().split('T')[0];\n      }).reverse(); // Liste des 30 derniers jours\n\n      const moodResponse = await fetch('http://localhost:3001/api/moods');\n      const moodData = await moodResponse.json();\n\n      const sleepResponse = await fetch('http://localhost:3001/api/sleep');\n      const sleepData = await sleepResponse.json();\n\n      const dailyTaskResponse = await fetch('http://localhost:3001/api/daily-tasks');\n      const dailyTaskData = await dailyTaskResponse.json();\n\n      const extraTaskResponse = await fetch('http://localhost:3001/api/extra-tasks');\n      const extraTaskData = await extraTaskResponse.json();\n\n      const scores = dates.map(date => {\n        const moodScore = moodData.find(entry => entry.Date === date)?.Score || 0;\n        const sleepScore = sleepData.find(entry => entry.Date === date)?.Score || 0;\n        const dailyTaskScore = dailyTaskData.find(entry => entry.Date === date)?.Score || 0;\n        const extraTaskScore = extraTaskData.find(entry => entry.Date === date)?.Score || 0;\n        return moodScore + sleepScore + dailyTaskScore + extraTaskScore;\n      });\n\n      setChartData({\n        labels: dates,\n        datasets: [\n          {\n            label: 'Score de productivité sur 30 jours',\n            data: scores,\n            fill: false,\n            borderColor: 'rgba(75,192,192,1)',\n            backgroundColor: 'rgba(75,192,192,0.4)',\n            tension: 0.1,\n          }\n        ]\n      });\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Productivity Over Last 30 Days</h2>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default ProductivityChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}