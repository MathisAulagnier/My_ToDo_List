{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MoodTracker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const [moods, setMoods] = useState([{\n    id: 1,\n    text: 'Happy',\n    selected: false\n  }, {\n    id: 2,\n    text: 'Sad',\n    selected: false\n  }, {\n    id: 3,\n    text: 'Excited',\n    selected: false\n  }, {\n    id: 4,\n    text: 'Anxious',\n    selected: false\n  }, {\n    id: 5,\n    text: 'Relaxed',\n    selected: false\n  }, {\n    id: 6,\n    text: 'Tired',\n    selected: false\n  }, {\n    id: 7,\n    text: 'Angry',\n    selected: false\n  }, {\n    id: 8,\n    text: 'Content',\n    selected: false\n  }]);\n  const [selectedMood, setSelectedMood] = useState(null);\n  const selectMood = id => {\n    const selectedMoodText = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map(mood => mood.id === id ? {\n      ...mood,\n      selected: true\n    } : {\n      ...mood,\n      selected: false\n    });\n    setMoods(updatedMoods);\n    setSelectedMood(selectedMoodText);\n  };\n  const handleValidation = async () => {\n    if (selectedMood) {\n      try {\n        const currentDate = new Date().toISOString().split('T')[0];\n        const response = await fetch('/update-mood', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            date: currentDate,\n            mood: selectedMood\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Erreur lors de la mise à jour de moodtracker.json');\n        }\n        console.log('MoodTracker: Humeur mise à jour avec succès dans moodtracker.json');\n      } catch (error) {\n        console.error('Erreur:', error);\n      }\n    } else {\n      console.log('Aucune humeur sélectionnée');\n    }\n  };\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), moods.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: mood.selected,\n        onChange: () => selectMood(mood.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), mood.text]\n    }, mood.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleValidation,\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"uvbN55ui3zX1ViwhKZMwo1SS9gY=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MoodTracker","_s","moods","setMoods","id","text","selected","selectedMood","setSelectedMood","selectMood","selectedMoodText","find","mood","updatedMoods","map","handleValidation","currentDate","Date","toISOString","split","response","fetch","method","headers","body","JSON","stringify","date","ok","Error","console","log","error","defaultMoodId","hasSelectedMood","some","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MoodTracker.css';\n\nconst MoodTracker = () => {\n  const [moods, setMoods] = useState([\n    { id: 1, text: 'Happy', selected: false },\n    { id: 2, text: 'Sad', selected: false },\n    { id: 3, text: 'Excited', selected: false },\n    { id: 4, text: 'Anxious', selected: false },\n    { id: 5, text: 'Relaxed', selected: false },\n    { id: 6, text: 'Tired', selected: false },\n    { id: 7, text: 'Angry', selected: false },\n    { id: 8, text: 'Content', selected: false },\n  ]);\n\n  const [selectedMood, setSelectedMood] = useState(null);\n\n  const selectMood = (id) => {\n    const selectedMoodText = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map((mood) =>\n      mood.id === id ? { ...mood, selected: true } : { ...mood, selected: false }\n    );\n    setMoods(updatedMoods);\n    setSelectedMood(selectedMoodText);\n  };\n\n  const handleValidation = async () => {\n    if (selectedMood) {\n      try {\n        const currentDate = new Date().toISOString().split('T')[0];\n\n        const response = await fetch('/update-mood', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            date: currentDate,\n            mood: selectedMood,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Erreur lors de la mise à jour de moodtracker.json');\n        }\n\n        console.log('MoodTracker: Humeur mise à jour avec succès dans moodtracker.json');\n      } catch (error) {\n        console.error('Erreur:', error);\n      }\n    } else {\n      console.log('Aucune humeur sélectionnée');\n    }\n  };\n\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods]);\n\n  return (\n    <div className=\"mood-tracker\">\n      <h2>How do you feel today?</h2>\n      {moods.map((mood) => (\n        <div key={mood.id} className=\"mood-item\">\n          <input\n            type=\"checkbox\"\n            checked={mood.selected}\n            onChange={() => selectMood(mood.id)}\n          />\n          {mood.text}\n        </div>\n      ))}\n      <button onClick={handleValidation}>Valider</button>\n    </div>\n  );\n};\n\nexport default MoodTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}