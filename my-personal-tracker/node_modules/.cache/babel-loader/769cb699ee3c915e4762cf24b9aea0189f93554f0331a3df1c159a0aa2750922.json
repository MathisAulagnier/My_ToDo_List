{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const [moods, setMoods] = useState([{\n    id: 1,\n    text: 'Joyeux',\n    selected: false\n  }, {\n    id: 2,\n    text: 'Triste',\n    selected: false\n  }, {\n    id: 3,\n    text: 'Énervé',\n    selected: false\n  }, {\n    id: 4,\n    text: 'Fatigué',\n    selected: false\n  }, {\n    id: 5,\n    text: 'Stressé',\n    selected: false\n  }, {\n    id: 6,\n    text: 'Calme',\n    selected: false\n  }]);\n  const [selectedMood, setSelectedMood] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false); // Pour suivre si les données ont été chargées\n\n  const formatDate = date => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n  const selectMood = useCallback(id => {\n    const selected = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map(mood => mood.id === id ? {\n      ...mood,\n      selected: true\n    } : {\n      ...mood,\n      selected: false\n    });\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date());\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Mood: selectedMood\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n  useEffect(() => {\n    const fetchMoodData = async () => {\n      const currentDate = formatDate(new Date());\n      try {\n        const response = await fetch('http://localhost:3001/api/moods');\n        const data = await response.json();\n        const existingMood = data.find(mood => mood.Date === currentDate);\n        if (existingMood) {\n          const moodId = moods.find(mood => mood.text === existingMood.Mood).id;\n          selectMood(moodId);\n        } else {\n          const defaultMoodId = moods.find(mood => mood.text === 'Calme').id; // Définir \"Calme\" comme humeur par défaut\n          selectMood(defaultMoodId);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données d\\'humeur:', error);\n        const defaultMoodId = moods.find(mood => mood.text === 'Calme').id;\n        selectMood(defaultMoodId);\n      } finally {\n        setDataLoaded(true); // Marque les données comme chargées\n      }\n    };\n    if (!dataLoaded) {\n      // Ne pas recharger les données si elles ont déjà été chargées\n      fetchMoodData();\n    }\n  }, [moods, selectMood, dataLoaded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Today's Mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), moods.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: mood.selected,\n        onChange: () => selectMood(mood.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), mood.text]\n    }, mood.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateMood,\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"lAb4D8ANUU+6BFzuHbhubrtb1Oc=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","MoodTracker","_s","moods","setMoods","id","text","selected","selectedMood","setSelectedMood","dataLoaded","setDataLoaded","formatDate","date","d","Date","day","getDate","month","getMonth","year","getFullYear","selectMood","find","mood","updatedMoods","map","validateMood","currentDate","response","fetch","method","headers","body","JSON","stringify","Mood","ok","Error","alert","error","console","fetchMoodData","data","json","existingMood","moodId","defaultMoodId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\n\nconst MoodTracker = () => {\n  const [moods, setMoods] = useState([\n    { id: 1, text: 'Joyeux', selected: false },\n    { id: 2, text: 'Triste', selected: false },\n    { id: 3, text: 'Énervé', selected: false },\n    { id: 4, text: 'Fatigué', selected: false },\n    { id: 5, text: 'Stressé', selected: false },\n    { id: 6, text: 'Calme', selected: false },\n  ]);\n\n  const [selectedMood, setSelectedMood] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false); // Pour suivre si les données ont été chargées\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n\n  const selectMood = useCallback((id) => {\n    const selected = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map((mood) =>\n      mood.id === id\n        ? { ...mood, selected: true }\n        : { ...mood, selected: false }\n    );\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date());\n\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Mood: selectedMood,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n\n  useEffect(() => {\n    const fetchMoodData = async () => {\n      const currentDate = formatDate(new Date());\n\n      try {\n        const response = await fetch('http://localhost:3001/api/moods');\n        const data = await response.json();\n\n        const existingMood = data.find(mood => mood.Date === currentDate);\n\n        if (existingMood) {\n          const moodId = moods.find(mood => mood.text === existingMood.Mood).id;\n          selectMood(moodId);\n        } else {\n          const defaultMoodId = moods.find(mood => mood.text === 'Calme').id; // Définir \"Calme\" comme humeur par défaut\n          selectMood(defaultMoodId);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données d\\'humeur:', error);\n        const defaultMoodId = moods.find(mood => mood.text === 'Calme').id;\n        selectMood(defaultMoodId);\n      } finally {\n        setDataLoaded(true); // Marque les données comme chargées\n      }\n    };\n\n    if (!dataLoaded) { // Ne pas recharger les données si elles ont déjà été chargées\n      fetchMoodData();\n    }\n  }, [moods, selectMood, dataLoaded]);\n\n  return (\n    <div className=\"mood-tracker\">\n      <h2>Today's Mood</h2>\n      {moods.map((mood) => (\n        <div key={mood.id} className=\"mood-item\">\n          <input\n            type=\"checkbox\"\n            checked={mood.selected}\n            onChange={() => selectMood(mood.id)}\n          />\n          {mood.text}\n        </div>\n      ))}\n      <button onClick={validateMood}>Valider</button>\n    </div>\n  );\n};\n\nexport default MoodTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}