{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const moodOptions = [{\n    id: 1,\n    text: 'Joyeux',\n    score: 2\n  }, {\n    id: 2,\n    text: 'Calme',\n    score: 1\n  }, {\n    id: 3,\n    text: 'Stressé',\n    score: 0.5\n  }, {\n    id: 4,\n    text: 'Normal',\n    score: 0\n  }, {\n    id: 5,\n    text: 'Fatigué',\n    score: -0.5\n  }, {\n    id: 6,\n    text: 'Enervé',\n    score: -1\n  }, {\n    id: 7,\n    text: 'Triste',\n    score: -2\n  }];\n  const [moods, setMoods] = useState(moodOptions);\n  const [selectedMood, setSelectedMood] = useState(moodOptions.find(m => m.text === \"Normal\"));\n  const [dataLoaded, setDataLoaded] = useState(false); // Pour suivre si les données ont été chargées\n\n  const formatDate = date => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n  const selectMood = useCallback(id => {\n    const selected = moods.find(mood => mood.id === id);\n    const updatedMoods = moods.map(mood => mood.id === id ? {\n      ...mood,\n      selected: true\n    } : {\n      ...mood,\n      selected: false\n    });\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date());\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Mood: selectedMood.text,\n          Score: selectedMood.score\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n  useEffect(() => {\n    const fetchMoodData = async () => {\n      const currentDate = formatDate(new Date());\n      try {\n        const response = await fetch('http://localhost:3001/api/moods');\n        const data = await response.json();\n        const existingMood = data.find(mood => mood.Date === currentDate);\n        if (existingMood) {\n          const moodId = moods.find(mood => mood.text === existingMood.Mood).id;\n          selectMood(moodId);\n        } else {\n          const defaultMoodId = moods.find(mood => mood.text === 'Normal').id;\n          selectMood(defaultMoodId);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données d\\'humeur:', error);\n        const defaultMoodId = moods.find(mood => mood.text === 'Normal').id;\n        selectMood(defaultMoodId);\n      } finally {\n        setDataLoaded(true); // Marque les données comme chargées\n      }\n    };\n    if (!dataLoaded) {\n      // Ne pas recharger les données si elles ont déjà été chargées\n      fetchMoodData();\n    }\n  }, [moods, selectMood, dataLoaded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Today's Mood\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), moods.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: mood.selected,\n        onChange: () => selectMood(mood.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), mood.text]\n    }, mood.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateMood,\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"GKsyHSS4Tix5TgDz9J3qlCKJm14=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","MoodTracker","_s","moodOptions","id","text","score","moods","setMoods","selectedMood","setSelectedMood","find","m","dataLoaded","setDataLoaded","formatDate","date","d","Date","day","getDate","month","getMonth","year","getFullYear","selectMood","selected","mood","updatedMoods","map","validateMood","currentDate","response","fetch","method","headers","body","JSON","stringify","Mood","Score","ok","Error","alert","error","console","fetchMoodData","data","json","existingMood","moodId","defaultMoodId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\n\nconst MoodTracker = () => {\n  const moodOptions = [\n    { id: 1, text: 'Joyeux', score: 2 },\n    { id: 2, text: 'Calme', score: 1 },\n    { id: 3, text: 'Stressé', score: 0.5 },\n    { id: 4, text: 'Normal', score: 0 },\n    { id: 5, text: 'Fatigué', score: -0.5 },\n    { id: 6, text: 'Enervé', score: -1 },\n    { id: 7, text: 'Triste', score: -2 },\n  ];\n\n  const [moods, setMoods] = useState(moodOptions);\n  const [selectedMood, setSelectedMood] = useState(moodOptions.find(m => m.text === \"Normal\"));\n  const [dataLoaded, setDataLoaded] = useState(false); // Pour suivre si les données ont été chargées\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n\n  const selectMood = useCallback((id) => {\n    const selected = moods.find(mood => mood.id === id);\n    const updatedMoods = moods.map((mood) =>\n      mood.id === id\n        ? { ...mood, selected: true }\n        : { ...mood, selected: false }\n    );\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date());\n\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Mood: selectedMood.text,\n          Score: selectedMood.score\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n\n  useEffect(() => {\n    const fetchMoodData = async () => {\n      const currentDate = formatDate(new Date());\n\n      try {\n        const response = await fetch('http://localhost:3001/api/moods');\n        const data = await response.json();\n\n        const existingMood = data.find(mood => mood.Date === currentDate);\n\n        if (existingMood) {\n          const moodId = moods.find(mood => mood.text === existingMood.Mood).id;\n          selectMood(moodId);\n        } else {\n          const defaultMoodId = moods.find(mood => mood.text === 'Normal').id;\n          selectMood(defaultMoodId);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données d\\'humeur:', error);\n        const defaultMoodId = moods.find(mood => mood.text === 'Normal').id;\n        selectMood(defaultMoodId);\n      } finally {\n        setDataLoaded(true); // Marque les données comme chargées\n      }\n    };\n\n    if (!dataLoaded) { // Ne pas recharger les données si elles ont déjà été chargées\n      fetchMoodData();\n    }\n  }, [moods, selectMood, dataLoaded]);\n\n  return (\n    <div className=\"mood-tracker\">\n      <h2>Today's Mood</h2>\n      {moods.map((mood) => (\n        <div key={mood.id} className=\"mood-item\">\n          <input\n            type=\"checkbox\"\n            checked={mood.selected}\n            onChange={() => selectMood(mood.id)}\n          />\n          {mood.text}\n        </div>\n      ))}\n      <button onClick={validateMood}>Valider</button>\n    </div>\n  );\n};\n\nexport default MoodTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}