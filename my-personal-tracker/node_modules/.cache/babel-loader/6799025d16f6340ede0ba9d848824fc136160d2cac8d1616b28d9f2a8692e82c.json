{"ast":null,"code":"app.post('/api/moods', async (req, res) => {\n  const {\n    Date,\n    Mood\n  } = req.body;\n  const moodScores = {\n    \"Joyeux\": 2,\n    \"Calme\": 1,\n    \"Stressé\": 0.5,\n    \"Normal\": 0,\n    // Default value\n    \"Fatigué\": -0.5,\n    \"Enervé\": -1,\n    \"Triste\": -2\n  };\n  const Score = moodScores[Mood] || 0;\n  try {\n    const moodDataPath = path.join(__dirname, 'public', 'moodtracker.json');\n    const data = await fs.readFile(moodDataPath, 'utf-8');\n    let moodData = JSON.parse(data);\n    const existingEntryIndex = moodData.findIndex(entry => entry.Date === Date);\n    if (existingEntryIndex >= 0) {\n      moodData[existingEntryIndex] = {\n        Date,\n        Mood,\n        Score\n      };\n    } else {\n      moodData.push({\n        Date,\n        Mood,\n        Score\n      });\n    }\n    await fs.writeFile(moodDataPath, JSON.stringify(moodData, null, 2));\n    res.json({\n      message: 'Humeur mise à jour avec succès'\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: 'Erreur lors de la mise à jour des données'\n    });\n  }\n});","map":{"version":3,"names":["app","post","req","res","Date","Mood","body","moodScores","Score","moodDataPath","path","join","__dirname","data","fs","readFile","moodData","JSON","parse","existingEntryIndex","findIndex","entry","push","writeFile","stringify","json","message","error","status"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["app.post('/api/moods', async (req, res) => {\n  const { Date, Mood } = req.body;\n  const moodScores = {\n    \"Joyeux\": 2,\n    \"Calme\": 1,\n    \"Stressé\": 0.5,\n    \"Normal\": 0, // Default value\n    \"Fatigué\": -0.5,\n    \"Enervé\": -1,\n    \"Triste\": -2,\n  };\n  const Score = moodScores[Mood] || 0;\n\n  try {\n    const moodDataPath = path.join(__dirname, 'public', 'moodtracker.json');\n    const data = await fs.readFile(moodDataPath, 'utf-8');\n    let moodData = JSON.parse(data);\n\n    const existingEntryIndex = moodData.findIndex((entry) => entry.Date === Date);\n    if (existingEntryIndex >= 0) {\n      moodData[existingEntryIndex] = { Date, Mood, Score };\n    } else {\n      moodData.push({ Date, Mood, Score });\n    }\n\n    await fs.writeFile(moodDataPath, JSON.stringify(moodData, null, 2));\n    res.json({ message: 'Humeur mise à jour avec succès' });\n  } catch (error) {\n    res.status(500).json({ error: 'Erreur lors de la mise à jour des données' });\n  }\n});"],"mappings":"AAAAA,GAAG,CAACC,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGH,GAAG,CAACI,IAAI;EAC/B,MAAMC,UAAU,GAAG;IACjB,QAAQ,EAAE,CAAC;IACX,OAAO,EAAE,CAAC;IACV,SAAS,EAAE,GAAG;IACd,QAAQ,EAAE,CAAC;IAAE;IACb,SAAS,EAAE,CAAC,GAAG;IACf,QAAQ,EAAE,CAAC,CAAC;IACZ,QAAQ,EAAE,CAAC;EACb,CAAC;EACD,MAAMC,KAAK,GAAGD,UAAU,CAACF,IAAI,CAAC,IAAI,CAAC;EAEnC,IAAI;IACF,MAAMI,YAAY,GAAGC,IAAI,CAACC,IAAI,CAACC,SAAS,EAAE,QAAQ,EAAE,kBAAkB,CAAC;IACvE,MAAMC,IAAI,GAAG,MAAMC,EAAE,CAACC,QAAQ,CAACN,YAAY,EAAE,OAAO,CAAC;IACrD,IAAIO,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;IAE/B,MAAMM,kBAAkB,GAAGH,QAAQ,CAACI,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACjB,IAAI,KAAKA,IAAI,CAAC;IAC7E,IAAIe,kBAAkB,IAAI,CAAC,EAAE;MAC3BH,QAAQ,CAACG,kBAAkB,CAAC,GAAG;QAAEf,IAAI;QAAEC,IAAI;QAAEG;MAAM,CAAC;IACtD,CAAC,MAAM;MACLQ,QAAQ,CAACM,IAAI,CAAC;QAAElB,IAAI;QAAEC,IAAI;QAAEG;MAAM,CAAC,CAAC;IACtC;IAEA,MAAMM,EAAE,CAACS,SAAS,CAACd,YAAY,EAAEQ,IAAI,CAACO,SAAS,CAACR,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACnEb,GAAG,CAACsB,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAiC,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdxB,GAAG,CAACyB,MAAM,CAAC,GAAG,CAAC,CAACH,IAAI,CAAC;MAAEE,KAAK,EAAE;IAA4C,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}