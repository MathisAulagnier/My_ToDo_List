{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const [moods, setMoods] = useState([{\n    id: 1,\n    text: 'Happy',\n    selected: false\n  }, {\n    id: 2,\n    text: 'Sad',\n    selected: false\n  }, {\n    id: 3,\n    text: 'Excited',\n    selected: false\n  }, {\n    id: 4,\n    text: 'Anxious',\n    selected: false\n  }, {\n    id: 5,\n    text: 'Relaxed',\n    selected: false\n  }, {\n    id: 6,\n    text: 'Tired',\n    selected: false\n  }, {\n    id: 7,\n    text: 'Angry',\n    selected: false\n  }, {\n    id: 8,\n    text: 'Content',\n    selected: false\n  }]);\n  const selectMood = async id => {\n    const selectedMood = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map(mood => mood.id === id ? {\n      ...mood,\n      selected: true\n    } : {\n      ...mood,\n      selected: false\n    });\n    setMoods(updatedMoods);\n    await updateMood(selectedMood); // Mise à jour du fichier JSON\n  };\n  const updateMood = async mood => {\n    const currentDate = new Date().toISOString().split('T')[0]; // Format de date: YYYY-MM-DD\n\n    try {\n      const response = await fetch('/update-mood', {\n        // Envoi au serveur\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          date: currentDate,\n          mood: mood\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour de moodtracker.json');\n      }\n      console.log('moodtracker.json mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur:', error);\n    }\n  };\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), moods.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: mood.selected,\n        onChange: () => selectMood(mood.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), mood.text]\n    }, mood.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"sMrpSpYzd0Zvlofs0yF4OyKekfA=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MoodTracker","_s","moods","setMoods","id","text","selected","selectMood","selectedMood","find","mood","updatedMoods","map","updateMood","currentDate","Date","toISOString","split","response","fetch","method","headers","body","JSON","stringify","date","ok","Error","console","log","error","defaultMoodId","hasSelectedMood","some","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\n\nconst MoodTracker = () => {\n  const [moods, setMoods] = useState([\n    { id: 1, text: 'Happy', selected: false },\n    { id: 2, text: 'Sad', selected: false },\n    { id: 3, text: 'Excited', selected: false },\n    { id: 4, text: 'Anxious', selected: false },\n    { id: 5, text: 'Relaxed', selected: false },\n    { id: 6, text: 'Tired', selected: false },\n    { id: 7, text: 'Angry', selected: false },\n    { id: 8, text: 'Content', selected: false },\n  ]);\n\n  const selectMood = async (id) => {\n    const selectedMood = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map((mood) =>\n      mood.id === id ? { ...mood, selected: true } : { ...mood, selected: false }\n    );\n    setMoods(updatedMoods);\n    await updateMood(selectedMood);  // Mise à jour du fichier JSON\n  };\n\n  const updateMood = async (mood) => {\n    const currentDate = new Date().toISOString().split('T')[0]; // Format de date: YYYY-MM-DD\n\n    try {\n      const response = await fetch('/update-mood', {  // Envoi au serveur\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          date: currentDate,\n          mood: mood,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour de moodtracker.json');\n      }\n\n      console.log('moodtracker.json mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur:', error);\n    }\n  };\n\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods]);\n\n  return (\n    <div className=\"mood-tracker\">\n      <h2>How do you feel today?</h2>\n      {moods.map((mood) => (\n        <div key={mood.id} className=\"mood-item\">\n          <input\n            type=\"checkbox\"\n            checked={mood.selected}\n            onChange={() => selectMood(mood.id)}\n          />\n          {mood.text}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default MoodTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}