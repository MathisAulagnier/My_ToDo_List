{"ast":null,"code":"var _jsxFileName = \"/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MoodTracker = () => {\n  _s();\n  const [moods, setMoods] = useState([{\n    id: 1,\n    text: 'Happy',\n    selected: false\n  }, {\n    id: 2,\n    text: 'Sad',\n    selected: false\n  }, {\n    id: 3,\n    text: 'Excited',\n    selected: false\n  }, {\n    id: 4,\n    text: 'Anxious',\n    selected: false\n  }, {\n    id: 5,\n    text: 'Relaxed',\n    selected: false\n  }, {\n    id: 6,\n    text: 'Tired',\n    selected: false\n  }, {\n    id: 7,\n    text: 'Angry',\n    selected: false\n  }, {\n    id: 8,\n    text: 'Content',\n    selected: false\n  }]);\n  const [selectedMood, setSelectedMood] = useState(null);\n  const formatDate = date => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n  const selectMood = useCallback(id => {\n    const selected = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map(mood => mood.id === id ? {\n      ...mood,\n      selected: true\n    } : {\n      ...mood,\n      selected: false\n    });\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date()); // Utilise formatDate pour obtenir la bonne date\n\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Moods: selectedMood\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods, selectMood]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"How do you feel today?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), moods.map(mood => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: mood.selected,\n        onChange: () => selectMood(mood.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), mood.text]\n    }, mood.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateMood,\n      children: \"Valider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(MoodTracker, \"fksFxj3ZlQFHvuzfd2ktugz2Ktk=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","MoodTracker","_s","moods","setMoods","id","text","selected","selectedMood","setSelectedMood","formatDate","date","d","Date","day","getDate","month","getMonth","year","getFullYear","selectMood","find","mood","updatedMoods","map","validateMood","currentDate","response","fetch","method","headers","body","JSON","stringify","Moods","ok","Error","alert","error","console","defaultMoodId","hasSelectedMood","some","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/mathisaulagnier/My_ToDo_List/my-personal-tracker/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './MoodTracker.css'; // Import du CSS pour les styles néon\n\nconst MoodTracker = () => {\n  const [moods, setMoods] = useState([\n    { id: 1, text: 'Happy', selected: false },\n    { id: 2, text: 'Sad', selected: false },\n    { id: 3, text: 'Excited', selected: false },\n    { id: 4, text: 'Anxious', selected: false },\n    { id: 5, text: 'Relaxed', selected: false },\n    { id: 6, text: 'Tired', selected: false },\n    { id: 7, text: 'Angry', selected: false },\n    { id: 8, text: 'Content', selected: false },\n  ]);\n\n  const [selectedMood, setSelectedMood] = useState(null);\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    let day = d.getDate();\n    let month = d.getMonth() + 1;\n    const year = d.getFullYear();\n\n    if (day < 10) day = '0' + day;\n    if (month < 10) month = '0' + month;\n\n    return `${year}-${month}-${day}`; // Format YYYY-MM-DD\n  };\n\n  const selectMood = useCallback((id) => {\n    const selected = moods.find(mood => mood.id === id).text;\n    const updatedMoods = moods.map((mood) =>\n      mood.id === id ? { ...mood, selected: true } : { ...mood, selected: false }\n    );\n    setMoods(updatedMoods);\n    setSelectedMood(selected);\n  }, [moods]);\n\n  const validateMood = async () => {\n    if (!selectedMood) return; // Si aucune humeur n'est sélectionnée, ne rien faire.\n\n    const currentDate = formatDate(new Date()); // Utilise formatDate pour obtenir la bonne date\n\n    try {\n      const response = await fetch('http://localhost:3001/api/moods', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          Date: currentDate,\n          Moods: selectedMood,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la mise à jour du MoodTracker');\n      }\n\n      alert('MoodTracker mis à jour avec succès');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du MoodTracker:', error);\n      alert('Erreur lors de la mise à jour du MoodTracker');\n    }\n  };\n\n  useEffect(() => {\n    const defaultMoodId = moods.find(mood => mood.text === 'Relaxed').id;\n    const hasSelectedMood = moods.some(mood => mood.selected);\n    if (!hasSelectedMood) {\n      selectMood(defaultMoodId);\n    }\n  }, [moods, selectMood]);\n\n  return (\n    <div className=\"mood-tracker\">\n      <h2>How do you feel today?</h2>\n      {moods.map((mood) => (\n        <div key={mood.id} className=\"mood-item\">\n          <input\n            type=\"checkbox\"\n            checked={mood.selected}\n            onChange={() => selectMood(mood.id)}\n          />\n          {mood.text}\n        </div>\n      ))}\n      <button onClick={validateMood}>Valider</button>\n    </div>\n  );\n};\n\nexport default MoodTracker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}